"""This file contains Django sitemap classes for generating XML sitemaps in a web application.

WebhallenJSONSitemap:
    Sitemap for Webhallen JSON for each product.
StaticViewSitemap:
    Static views. For example, the index page, about page, and contact page.

Docs:
    https://docs.djangoproject.com/en/5.0/ref/contrib/sitemaps/
"""

from __future__ import annotations

import subprocess
from datetime import datetime
from pathlib import Path

from django.contrib.sitemaps import Sitemap
from django.urls import reverse

from intel.models import Processor
from webhallen.models import WebhallenJSON


class WebhallenJSONSitemap(Sitemap):
    """Sitemap for WebhallenJSON."""

    priority: float = 0.1
    protocol = "https"

    def items(self: WebhallenJSONSitemap):  # noqa: PLR6301, ANN201
        """Required. A method that returns a sequence or QuerySet of objects.

        The framework doesn't care what type of objects they are; all that matters
        is that these objects get passed to the location(), lastmod(), changefreq() and priority() methods.
        """
        return WebhallenJSON.objects.all()

    def lastmod(self: WebhallenJSONSitemap, obj: WebhallenJSON) -> datetime:  # noqa: PLR6301
        """Optional. Either a method or attribute.

        If it's a method, it should take one argument - an object as returned by items() - and return
        that object's last-modified date/time as a datetime.

        If it's an attribute, its value should be a datetime representing the last-modified date/time
        for every object returned by items().

        If all items in a sitemap have a lastmod, the sitemap generated by views.sitemap() will have a
        Last-Modified header equal to the latest lastmod. You can activate the ConditionalGetMiddleware
        to make Django respond appropriately to requests with an If-Modified-Since header which will
        prevent sending the sitemap if it hasn't changed.
        """
        return obj.updated


class IntelProcessorSitemap(Sitemap):
    """Sitemap for Intel processors."""

    priority: float = 0.5
    protocol = "https"

    def items(self: IntelProcessorSitemap):  # noqa: PLR6301, ANN201
        """Required. A method that returns a sequence or QuerySet of objects.

        The framework doesn't care what type of objects they are; all that matters
        is that these objects get passed to the location(), lastmod(), changefreq() and priority() methods.
        """
        return Processor.objects.all()

    def lastmod(self: IntelProcessorSitemap, obj: Processor) -> datetime:  # noqa: PLR6301
        """Optional. Either a method or attribute.

        If it's a method, it should take one argument - an object as returned by items() - and return
        that object's last-modified date/time as a datetime.

        If it's an attribute, its value should be a datetime representing the last-modified date/time
        for every object returned by items().

        If all items in a sitemap have a lastmod, the sitemap generated by views.sitemap() will have a
        Last-Modified header equal to the latest lastmod. You can activate the ConditionalGetMiddleware
        to make Django respond appropriately to requests with an If-Modified-Since header which will
        prevent sending the sitemap if it hasn't changed.
        """
        return obj.updated


def get_file_location(item: str) -> Path | None:
    """Return the location of the item.

    Args:
        item (str): The name of the view.

    Returns:
        Path: The location of the item.
    """
    if item in {"redoc", "swagger"}:
        # These are generated by Django Ninja
        return None

    # Get the path to the templates directory
    template_dir: Path = Path(__file__).resolve().parent.parent / "templates"

    locations: dict[str, Path] = {
        "products:index": Path(template_dir / "index.html"),
        "products:privacy": Path(template_dir / "privacy.html"),
        "products:terms": Path(template_dir / "terms.html"),
        "products:contact": Path(template_dir / "contact.html"),
        "products:api": Path(template_dir / "api.html"),
    }

    return locations[item]


class StaticViewSitemap(Sitemap):
    """Sitemap for static views.

    https://docs.djangoproject.com/en/5.0/ref/contrib/sitemaps/#sitemap-for-static-views
    """

    priority: float = 0.5
    protocol = "https"

    def items(self: StaticViewSitemap) -> list[str]:  # noqa: PLR6301
        """Return a list of url names for views to include in this sitemap.

        Args:
            self: StaticViewSitemap

        Returns:
            list[str]: A list of url names for views to include in this sitemap.
        """
        # TODO(TheLovinator): #23 Add redoc and swagger docs to sitemap
        # https://github.com/TheLovinator1/panso.se/issues/23
        return [
            "products:index",
            "products:privacy",
            "products:terms",
            "products:contact",
            "products:api",
            "redoc",
            "swagger",
        ]

    def location(self: StaticViewSitemap, item: str) -> str:  # noqa: PLR6301
        """Return the location of the item.

        Because we are using both Redoc and Swagger for docs, we need to return the location of the item
        manually.

        Args:
            self: StaticViewSitemap
            item (str): The name of the view.

        Returns:
            str: The location of the item.
        """
        if item == "redoc":
            return "/api/v1/docs/redoc"
        if item == "swagger":
            return "/api/v1/docs/swagger"

        return reverse(item)

    def lastmod(self: StaticViewSitemap, item: str) -> datetime | None:  # noqa: PLR6301
        """Return the last modified time of the item.

        Args:
            self: StaticViewSitemap
            item (str): The name of the view.

        Returns:
            datetime: The last modified time of the item.
        """
        # Get the location of the item
        item_location: Path | None = get_file_location(item)

        if item_location is None:
            # If the item is not a file, return None
            return None

        try:
            # Run git log command to get the last commit date of the file
            command: list[str] = ["git", "log", "-n", "1", "--format=%cd", "--", str(item_location)]
            result: subprocess.CompletedProcess[str] = subprocess.run(
                args=command,
                stdout=subprocess.PIPE,
                text=True,
                check=True,
            )

            # Parse the date string from the Git command output
            last_commit_date_str: str = result.stdout.strip()

            # Convert the date string to a datetime object
            # Example date string: Thu Dec 21 04:23:28 2023 +0100
            return datetime.strptime(last_commit_date_str, "%a %b %d %H:%M:%S %Y %z")

        except (subprocess.CalledProcessError, ValueError):
            return None
