from __future__ import annotations

from typing import TYPE_CHECKING, Literal

from django.contrib.sitemaps import Sitemap
from django.urls import reverse

from webhallen.models import WebhallenJSON

if TYPE_CHECKING:
    from datetime import datetime


class WebhallenJSONSitemap(Sitemap):
    """Sitemap for WebhallenJSON."""

    changefreq: Literal["always", "hourly", "daily", "weekly", "monthly", "yearly", "never"] = "daily"
    priority: float = 0.5
    protocol = "https"

    def items(self: WebhallenJSONSitemap):  # noqa: PLR6301, ANN201
        """Required. A method that returns a sequence or QuerySet of objects.

        The framework doesn't care what type of objects they are; all that matters
        is that these objects get passed to the location(), lastmod(), changefreq() and priority() methods.
        """
        return WebhallenJSON.objects.all()

    def lastmod(self: WebhallenJSONSitemap, obj: WebhallenJSON) -> datetime:  # noqa: PLR6301
        """Optional. Either a method or attribute.

        If it's a method, it should take one argument - an object as returned by items() - and return
        that object's last-modified date/time as a datetime.

        If it's an attribute, its value should be a datetime representing the last-modified date/time
        for every object returned by items().

        If all items in a sitemap have a lastmod, the sitemap generated by views.sitemap() will have a
        Last-Modified header equal to the latest lastmod. You can activate the ConditionalGetMiddleware
        to make Django respond appropriately to requests with an If-Modified-Since header which will
        prevent sending the sitemap if it hasn't changed.
        """
        return obj.created


class StaticViewSitemap(Sitemap):
    """Sitemap for static views.

    https://docs.djangoproject.com/en/5.0/ref/contrib/sitemaps/#sitemap-for-static-views
    """

    priority: float = 0.5
    changefreq: Literal["always", "hourly", "daily", "weekly", "monthly", "yearly", "never"] = "daily"
    protocol = "https"

    def items(self: StaticViewSitemap) -> list[str]:  # noqa: PLR6301
        """Return a list of url names for views to include in this sitemap.

        Args:
            self: StaticViewSitemap

        Returns:
            list[str]: A list of url names for views to include in this sitemap.
        """
        return ["products:index", "webhallen:index", "api-v1:openapi-view"]

    def location(self: StaticViewSitemap, item: str) -> str:  # noqa: PLR6301
        """Return the location of the item.

        Args:
            self: StaticViewSitemap
            item (str): The name of the view.

        Returns:
            str: The location of the item.
        """
        return reverse(item)
