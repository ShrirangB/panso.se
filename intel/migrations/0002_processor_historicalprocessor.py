# Generated by Django 4.2.8 on 2023-12-11 05:25

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('intel', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Processor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product_collection', models.TextField(blank=True, help_text='The product family the processor belongs to.', null=True, verbose_name='Product Collection')),
                ('vertical_segment', models.TextField(blank=True, help_text='The vertical segment the processor belongs to.', null=True, verbose_name='Vertical Segment')),
                ('processor_number', models.TextField(blank=True, help_text='Server, Mobile, Desktop', null=True, verbose_name='Processor Number')),
                ('lithography', models.TextField(blank=True, help_text='Die size', null=True, verbose_name='Lithography')),
                ('use_conditions', models.TextField(blank=True, help_text='The use conditions the processor is designed for.', null=True, verbose_name='Use Conditions')),
                ('recommended_customer_price', models.TextField(blank=True, help_text='The recommended customer price for the processor.', null=True, verbose_name='Recommended Customer Price')),
                ('total_cores', models.IntegerField(blank=True, help_text='The number of cores the processor has.', null=True, verbose_name='Total Cores')),
                ('total_threads', models.IntegerField(blank=True, help_text='The number of threads the processor has.', null=True, verbose_name='Total Threads')),
                ('max_turbo_frequency', models.IntegerField(blank=True, help_text='The maximum turbo frequency the processor can reach. In hertz.', null=True, verbose_name='Max Turbo Frequency')),
                ('base_frequency', models.IntegerField(blank=True, help_text='The base frequency the processor can reach. In hertz.', null=True, verbose_name='Base Frequency')),
                ('l3_cache', models.TextField(blank=True, help_text='The L3 cache the processor has. In bytes.', null=True, verbose_name='L3 Cache')),
                ('cache', models.TextField(blank=True, help_text='The cache the processor has.', null=True, verbose_name='Cache')),
                ('upi_links', models.IntegerField(blank=True, help_text='The number of Intel Ultra Path Interconnect links the processor has.', null=True, verbose_name='UPI Links')),
                ('tdp', models.IntegerField(blank=True, help_text='The Thermal Design Power of the processor. In watts.', null=True, verbose_name='TDP')),
                ('turbo_boost_2_0_frequency', models.IntegerField(blank=True, help_text='The maximum turbo frequency the processor can reach. In hertz.', null=True, verbose_name='Turbo Boost 2.0 Frequency')),
                ('turbo_boost_max_technology_3_0_frequency', models.IntegerField(blank=True, help_text='The maximum turbo frequency the processor can reach. In hertz.', null=True, verbose_name='Turbo Boost Max Technology 3.0 Frequency')),
                ('number_of_qpi_links', models.IntegerField(blank=True, help_text='The number of Intel QuickPath Interconnect links the processor has.', null=True, verbose_name='Number of QPI Links')),
                ('bus_speed', models.IntegerField(blank=True, help_text='The bus speed of the processor. In hertz.', null=True, verbose_name='Bus Speed')),
                ('configurable_tdp_down_frequency', models.IntegerField(blank=True, help_text='The configurable TDP-down frequency of the processor. In hertz.', null=True, verbose_name='Configurable TDP-down Frequency')),
                ('configurable_tdp_down', models.IntegerField(blank=True, help_text='The configurable TDP-down of the processor. In watts.', null=True, verbose_name='Configurable TDP-down')),
                ('thermal_velocity_boost_frequency', models.IntegerField(blank=True, help_text='The thermal velocity boost frequency of the processor. In hertz.', null=True, verbose_name='Thermal Velocity Boost Frequency')),
                ('upi_speed', models.IntegerField(blank=True, help_text='The UPI speed of the processor. In giga-transfers per second.', null=True, verbose_name='UPI Speed')),
                ('speedstep_max_frequency', models.IntegerField(blank=True, help_text='The maximum SpeedStep frequency of the processor. In hertz.', null=True, verbose_name='SpeedStep Max Frequency')),
                ('performance_cores', models.IntegerField(blank=True, help_text='The number of performance cores the processor has.', null=True, verbose_name='Performance Cores')),
                ('efficiency_cores', models.IntegerField(blank=True, help_text='The number of efficiency cores the processor has.', null=True, verbose_name='Efficiency Cores')),
                ('configurable_tdp_up_frequency', models.IntegerField(blank=True, help_text='The configurable TDP-up frequency of the processor. In hertz.', null=True, verbose_name='Configurable TDP-up Frequency')),
                ('configurable_tdp_up', models.IntegerField(blank=True, help_text='The configurable TDP-up of the processor. In watts.', null=True, verbose_name='Configurable TDP-up')),
                ('p_core_base_frequency', models.IntegerField(blank=True, help_text='The base frequency of the P-Core. In hertz.', null=True, verbose_name='P-Core Base Frequency')),
                ('e_core_base_frequency', models.IntegerField(blank=True, help_text='The base frequency of the E-Core. In hertz.', null=True, verbose_name='E-Core Base Frequency')),
                ('deep_learning_boost', models.BooleanField(blank=True, help_text='Whether the processor has Deep Learning Boost.', null=True, verbose_name='Deep Learning Boost')),
                ('processor_base_power', models.IntegerField(blank=True, help_text='The processor base power. In watts.', null=True, verbose_name='Processor Base Power')),
                ('maximum_turbo_power', models.IntegerField(blank=True, help_text='The maximum turbo power. In watts.', null=True, verbose_name='Maximum Turbo Power')),
                ('marketing_status', models.TextField(blank=True, help_text='The marketing status of the processor.', null=True, verbose_name='Marketing Status')),
                ('launch_date', models.TextField(blank=True, help_text='The launch date of the processor.', null=True, verbose_name='Launch Date')),
                ('servicing_status', models.TextField(blank=True, help_text='The servicing status of the processor.', null=True, verbose_name='Servicing Status')),
                ('end_of_servicing_updates_date', models.DateField(blank=True, help_text='The end of servicing updates date of the processor.', null=True, verbose_name='End of Servicing Updates Date')),
                ('end_of_interactive_support_date', models.DateField(blank=True, help_text='The end of interactive support date of the processor.', null=True, verbose_name='End of Interactive Support Date')),
                ('embedded_options_available', models.BooleanField(blank=True, help_text='Whether embedded options are available.', null=True, verbose_name='Embedded Options Available')),
                ('datasheet', models.URLField(blank=True, help_text='The datasheet of the processor.', null=True, verbose_name='Datasheet')),
                ('product_brief_url', models.URLField(blank=True, help_text='The product brief URL of the processor.', null=True, verbose_name='Product Brief URL')),
                ('product_brief', models.FileField(blank=True, help_text='The product brief of the processor.', null=True, upload_to='', verbose_name='Product Brief')),
                ('additional_information_url', models.URLField(blank=True, help_text='The additional information URL of the processor.', null=True, verbose_name='Additional Information URL')),
                ('description', models.TextField(blank=True, help_text='The description of the processor.', null=True, verbose_name='Description')),
                ('included_items', models.TextField(blank=True, help_text='The included items of the processor.', null=True, verbose_name='Included Items')),
                ('extended_temperature_options', models.TextField(blank=True, help_text='The extended temperature options of the processor.', null=True, verbose_name='Extended Temperature Options')),
                ('max_memory_size', models.TextField(blank=True, help_text='The maximum memory size the processor supports.', null=True, verbose_name='Max Memory Size')),
                ('memory_types', models.TextField(blank=True, help_text='The memory types the processor supports.', null=True, verbose_name='Memory Types')),
                ('max_memory_speed', models.IntegerField(blank=True, help_text='The maximum memory speed the processor supports. In hertz.', null=True, verbose_name='Max Memory Speed')),
                ('max_number_of_memory_channels', models.IntegerField(blank=True, help_text='The maximum number of memory channels the processor supports.', null=True, verbose_name='Max Number of Memory Channels')),
                ('max_hbm_memory_size', models.TextField(blank=True, help_text='The maximum HBM memory size the processor supports.', null=True, verbose_name='Max HBM Memory Size')),
                ('ecc_memory_supported', models.BooleanField(blank=True, help_text='Whether ECC memory is supported.', null=True, verbose_name='ECC Memory Supported')),
                ('max_memory_bandwidth', models.IntegerField(blank=True, help_text='The maximum memory bandwidth the processor supports. In bytes per second.', null=True, verbose_name='Max Memory Bandwidth')),
                ('physical_address_extensions', models.IntegerField(blank=True, help_text='The physical address extensions the processor supports.', null=True, verbose_name='Physical Address Extensions')),
                ('scalability', models.TextField(blank=True, help_text='The scalability of the processor.', null=True, verbose_name='Scalability')),
                ('pci_express_revision', models.TextField(blank=True, help_text='The PCI Express revision the processor supports.', null=True, verbose_name='PCI Express Revision')),
                ('max_amount_of_pci_express_lanes', models.IntegerField(blank=True, help_text='The maximum amount of PCI Express lanes the processor supports.', null=True, verbose_name='Max Amount of PCI Express Lanes')),
                ('pci_express_configurations', models.TextField(blank=True, help_text='The PCI Express configurations the processor supports.', null=True, verbose_name='PCI Express Configurations')),
                ('microprocessor_pcie_revision', models.TextField(blank=True, help_text='The microprocessor PCIe revision the processor supports.', null=True, verbose_name='Microprocessor PCIe Revision')),
                ('thunderbolt_4_support', models.BooleanField(blank=True, help_text='Whether Thunderbolt 4 is supported.', null=True, verbose_name='Thunderbolt 4 Support')),
                ('chipset_pch_pcie_revision', models.TextField(blank=True, help_text='The chipset PCH PCIe revision the processor supports.', null=True, verbose_name='Chipset PCH PCIe Revision')),
                ('direct_media_interface_revision', models.TextField(blank=True, help_text='The direct media interface revision the processor supports.', null=True, verbose_name='Direct Media Interface Revision')),
                ('max_amount_of_direct_media_interface_lanes', models.IntegerField(blank=True, help_text='The maximum amount of direct media interface lanes the processor supports.', null=True, verbose_name='Max Amount of Direct Media Interface Lanes')),
                ('socket_supported', models.TextField(blank=True, help_text='The socket supported by the processor.', null=True, verbose_name='Socket Supported')),
                ('t_case', models.IntegerField(blank=True, help_text='The T case of the processor. In celsius.', null=True, verbose_name='T Case')),
                ('package_size', models.TextField(blank=True, help_text='The package size of the processor.', null=True, verbose_name='Package Size')),
                ('max_cpu_configuration', models.TextField(blank=True, help_text='The maximum CPU configuration the processor supports.', null=True, verbose_name='Max CPU Configuration')),
                ('t_junction', models.IntegerField(blank=True, help_text='The T junction of the processor. In celsius.', null=True, verbose_name='T Junction')),
                ('thermal_solution_specification', models.TextField(blank=True, help_text='The thermal solution specification of the processor.', null=True, verbose_name='Thermal Solution Specification')),
                ('thermal_velocity_boost_temperature', models.IntegerField(blank=True, help_text='The thermal velocity boost temperature of the processor. In celsius.', null=True, verbose_name='Thermal Velocity Boost Temperature')),
                ('operating_temperature_max', models.IntegerField(blank=True, help_text='The maximum operating temperature of the processor. In celsius.', null=True, verbose_name='Operating Temperature Max')),
                ('operating_temperature_min', models.IntegerField(blank=True, help_text='The minimum operating temperature of the processor. In celsius.', null=True, verbose_name='Operating Temperature Min')),
                ('package_carrier', models.TextField(blank=True, help_text='The package carrier of the processor.', null=True, verbose_name='Package Carrier')),
                ('dts_max', models.IntegerField(blank=True, help_text='The Digital Thermal Sensors max of the processor. In celsius.', null=True, verbose_name='DTS Max')),
                ('operating_temperature_range', models.TextField(blank=True, help_text='The operating temperature range of the processor.', null=True, verbose_name='Operating Temperature Range')),
                ('optane_supported', models.BooleanField(blank=True, help_text='Whether Optane is supported.', null=True, verbose_name='Optane Supported')),
                ('speed_shift_technology', models.BooleanField(blank=True, help_text='Whether speed shift technology is supported.', null=True, verbose_name='Speed Shift Technology')),
                ('turbo_boost_max_technology_3_0', models.BooleanField(blank=True, help_text='Whether turbo boost max technology 3.0 is supported.', null=True, verbose_name='Turbo Boost Max Technology 3.0')),
                ('turbo_boost_technology', models.TextField(blank=True, help_text='The turbo boost technology the processor supports.', null=True, verbose_name='Turbo Boost Technology')),
                ('hyper_threading_technology', models.BooleanField(blank=True, help_text='Whether hyper-threading technology is supported.', null=True, verbose_name='Hyper-Threading Technology')),
                ('transactional_synchronization_extensions', models.BooleanField(blank=True, help_text='Whether transactional synchronization extensions are supported.', null=True, verbose_name='Transactional Synchronization Extensions')),
                ('_64_bit', models.BooleanField(blank=True, help_text='Whether 64-bit is supported.', null=True, verbose_name='64-bit')),
                ('instruction_set_extensions', models.TextField(blank=True, help_text='The instruction set extensions the processor supports.', null=True, verbose_name='Instruction Set Extensions')),
                ('avx_512_fma_units', models.IntegerField(blank=True, help_text='The number of AVX-512 FMA units the processor has.', null=True, verbose_name='AVX-512 FMA Units')),
                ('enhanced_speedstep_technology', models.BooleanField(blank=True, help_text='Whether enhanced speedstep technology is supported.', null=True, verbose_name='Enhanced SpeedStep Technology')),
                ('volume_management_device', models.BooleanField(blank=True, help_text='Whether volume management device is supported.', null=True, verbose_name='Volume Management Device')),
                ('instruction_set', models.TextField(blank=True, help_text='The instruction set the processor supports.', null=True, verbose_name='Instruction Set')),
                ('idle_states', models.BooleanField(blank=True, help_text='Whether idle states are supported.', null=True, verbose_name='Idle States')),
                ('thermal_monitoring_technologies', models.BooleanField(blank=True, help_text='Whether thermal monitoring technologies are supported.', null=True, verbose_name='Thermal Monitoring Technologies')),
                ('integrated_quick_assist_technology', models.BooleanField(blank=True, help_text='Whether Integrated Quick assist technology is supported.', null=True, verbose_name='Integrated Quick Assist Technology')),
                ('management_engine_firmware_version', models.TextField(blank=True, help_text='The management engine firmware version the processor supports.', null=True, verbose_name='Management Engine Firmware Version')),
                ('quiet_system_technology', models.BooleanField(blank=True, help_text='Whether quiet system technology is supported.', null=True, verbose_name='Quiet System Technology')),
                ('my_wifi_technology', models.BooleanField(blank=True, help_text='Whether My WiFi technology is supported.', null=True, verbose_name='My WiFi Technology')),
                ('flex_memory_access', models.BooleanField(blank=True, help_text='Whether flex memory access is supported.', null=True, verbose_name='Flex Memory Access')),
                ('identity_protection_technology', models.BooleanField(blank=True, help_text='Whether identity protection technology is supported.', null=True, verbose_name='Identity Protection Technology')),
                ('speed_select_technology_performance_profile', models.BooleanField(blank=True, help_text='Whether speed select technology performance profile is supported.', null=True, verbose_name='Speed Select Technology Performance Profile')),
                ('speed_select_technology_base_frequency', models.BooleanField(blank=True, help_text='Whether speed select technology base frequency is supported.', null=True, verbose_name='Speed Select Technology Base Frequency')),
                ('resource_director_technology', models.BooleanField(blank=True, help_text='Whether RDT is supported.', null=True, verbose_name='RDT')),
                ('demand_based_switching', models.BooleanField(blank=True, help_text='Whether demand based switching is supported.', null=True, verbose_name='Demand Based Switching')),
                ('thermal_velocity_boost', models.BooleanField(blank=True, help_text='Whether thermal velocity boost is supported.', null=True, verbose_name='Thermal Velocity Boost')),
                ('speed_select_technology_core_power', models.BooleanField(blank=True, help_text='Whether speed select technology core power is supported.', null=True, verbose_name='Speed Select Technology Core Power')),
                ('speed_select_technology_turbo_frequency', models.BooleanField(blank=True, help_text='Whether speed select technology turbo frequency is supported.', null=True, verbose_name='Speed Select Technology Turbo Frequency')),
                ('gaussian_neural_accelerator', models.BooleanField(blank=True, help_text='Whether gaussian & neural accelerator is supported.', null=True, verbose_name='Gaussian & Neural Accelerator')),
                ('high_priority_cores', models.BooleanField(blank=True, help_text='Whether high priority cores is supported.', null=True, verbose_name='High Priority Cores')),
                ('high_priority_cores_frequency', models.BooleanField(blank=True, help_text='Whether high priority cores frequency is supported.', null=True, verbose_name='High Priority Cores Frequency')),
                ('low_priority_cores', models.BooleanField(blank=True, help_text='Whether low priority cores is supported.', null=True, verbose_name='Low Priority Cores')),
                ('low_priority_cores_frequency', models.BooleanField(blank=True, help_text='Whether low priority cores frequency is supported.', null=True, verbose_name='Low Priority Cores Frequency')),
                ('image_processing_unit', models.BooleanField(blank=True, help_text='Whether image processing unit is supported.', null=True, verbose_name='Image Processing Unit')),
                ('smart_sound_technology', models.BooleanField(blank=True, help_text='Whether smart sound technology is supported.', null=True, verbose_name='Smart Sound Technology')),
                ('wake_on_voice', models.BooleanField(blank=True, help_text='Whether wake on voice is supported.', null=True, verbose_name='Wake on Voice')),
                ('high_definition_audio', models.BooleanField(blank=True, help_text='Whether high definition audio is supported.', null=True, verbose_name='High Definition Audio')),
                ('adaptix_technology', models.BooleanField(blank=True, help_text='Whether Adaptix technology is supported.', null=True, verbose_name='Adaptix Technology')),
                ('time_coordinated_computing', models.BooleanField(blank=True, help_text='Whether time coordinated computing is supported.', null=True, verbose_name='Time Coordinated Computing')),
                ('mipi_soundwire_technology', models.BooleanField(blank=True, help_text='Whether MIPI SoundWire technology is supported.', null=True, verbose_name='MIPI SoundWire Technology')),
                ('on_demand_feature_activation', models.BooleanField(blank=True, help_text='Whether on-demand feature activation is supported.', null=True, verbose_name='On-Demand Feature Activation')),
                ('data_streaming_accelerator', models.BooleanField(blank=True, help_text='Whether Data Streaming Accelerator (DSA) is supported.', null=True, verbose_name='Data Streaming Accelerator (DSA)')),
                ('advanced_matrix_extensions', models.BooleanField(blank=True, help_text='Whether advanced matrix extensions is supported.', null=True, verbose_name='Advanced Matrix Extensions')),
                ('quick_assist_technology', models.BooleanField(blank=True, help_text='Whether quick assist technology is supported.', null=True, verbose_name='Quick Assist Technology')),
                ('dynamic_load_balancer', models.BooleanField(blank=True, help_text='Whether Dynamic Load Balancer (DLB) is supported.', null=True, verbose_name='Dynamic Load Balancer (DLB)')),
                ('in_memory_analytics_accelerator', models.BooleanField(blank=True, help_text='Whether In-Memory Analytics Accelerator (IAA) is supported.', null=True, verbose_name='In-Memory Analytics Accelerator (IAA)')),
                ('vran_boost', models.BooleanField(blank=True, help_text='Whether VRAN Boost is supported.', null=True, verbose_name='VRAN Boost')),
                ('vpro_eligibility', models.TextField(blank=True, help_text='The vPro eligibility of the processor.', null=True, verbose_name='vPro Eligibility')),
                ('quick_assist_software_acceleration', models.BooleanField(blank=True, help_text='Whether quick assist software acceleration is supported.', null=True, verbose_name='Quick Assist Software Acceleration')),
                ('aes_new_instructions', models.BooleanField(blank=True, help_text='Whether AES new instructions is supported.', null=True, verbose_name='AES New Instructions')),
                ('trusted_execution_technology', models.BooleanField(blank=True, help_text='Whether trusted execution technology is supported.', null=True, verbose_name='Trusted Execution Technology')),
                ('execute_disable_bit', models.BooleanField(blank=True, help_text='Whether execute disable bit is supported.', null=True, verbose_name='Execute Disable Bit')),
                ('run_sure_technology', models.BooleanField(blank=True, help_text='Whether run sure technology is supported.', null=True, verbose_name='Run Sure Technology')),
                ('mode_based_execute_control', models.BooleanField(blank=True, help_text='Whether Mode-based Execute Control (MBEC) is supported.', null=True, verbose_name='Mode-based Execute Control (MBEC)')),
                ('virtualization_technology', models.BooleanField(blank=True, help_text='Whether Virtualization Technology (VT-x) is supported.', null=True, verbose_name='Virtualization Technology (VT-x)')),
                ('virtualization_technology_for_directed_io', models.BooleanField(blank=True, help_text='Whether Virtualization Technology for Directed I/O (VT-d) is supported.', null=True, verbose_name='Virtualization Technology for Directed I/O (VT-d)')),
                ('virtualization_technology_with_extended_page_tables', models.BooleanField(blank=True, help_text='Whether Virtualization Technology with Extended Page Tables (EPT) is supported.', null=True, verbose_name='Virtualization Technology with Extended Page Tables (EPT)')),
                ('secure_key', models.BooleanField(blank=True, help_text='Whether secure key is supported.', null=True, verbose_name='Secure Key')),
                ('os_guard', models.BooleanField(blank=True, help_text='Whether OS guard is supported.', null=True, verbose_name='OS Guard')),
                ('software_guard_extensions', models.BooleanField(blank=True, help_text='Whether Software Guard Extensions (SGX) is supported.', null=True, verbose_name='Software Guard Extensions (SGX)')),
                ('boot_guard', models.BooleanField(blank=True, help_text='Whether boot guard is supported.', null=True, verbose_name='Boot Guard')),
                ('memory_protection_extensions', models.BooleanField(blank=True, help_text='Whether Memory Protection Extensions (MPX) is supported.', null=True, verbose_name='Memory Protection Extensions (MPX)')),
                ('stable_image_platform_program', models.BooleanField(blank=True, help_text='Whether Stable Image Platform Program (SIPP) is supported.', null=True, verbose_name='Stable Image Platform Program (SIPP)')),
                ('maximum_enclave_size_for_sgx', models.BooleanField(blank=True, help_text='Whether maximum enclave size for SGX is supported.', null=True, verbose_name='Maximum Enclave Size for SGX')),
                ('crypto_acceleration', models.BooleanField(blank=True, help_text='Whether crypto acceleration is supported.', null=True, verbose_name='Crypto Acceleration')),
                ('platform_firmware_resilience', models.BooleanField(blank=True, help_text='Whether Platform Firmware Resilience is supported.', null=True, verbose_name='Platform Firmware Resilience')),
                ('total_memory_encryption', models.BooleanField(blank=True, help_text='Whether total memory encryption is supported.', null=True, verbose_name='Total Memory Encryption')),
                ('control_flow_enforcement_technology', models.BooleanField(blank=True, help_text='Whether Control-flow Enforcement Technology is supported.', null=True, verbose_name='Control-flow Enforcement Technology')),
                ('threat_detection_technology', models.BooleanField(blank=True, help_text='Whether Threat Detection Technology (TDT) is supported.', null=True, verbose_name='Threat Detection Technology (TDT)')),
                ('active_management_technology', models.BooleanField(blank=True, help_text='Whether Active Management Technology (AMT) is supported.', null=True, verbose_name='Active Management Technology (AMT)')),
                ('remote_platform_erase', models.BooleanField(blank=True, help_text='Whether Remote Platform Erase (RPE) is supported.', null=True, verbose_name='Remote Platform Erase (RPE)')),
                ('one_click_recovery', models.BooleanField(blank=True, help_text='Whether One-click Recovery is supported.', null=True, verbose_name='One-click Recovery')),
                ('total_memory_encryption_multi_key', models.BooleanField(blank=True, help_text='Whether Total Memory Encryption Multi-Key is supported.', null=True, verbose_name='Total Memory Encryption Multi-Key')),
                ('virtualization_technology_with_redirect_protection', models.BooleanField(blank=True, help_text='Whether Virtualization Technology with Redirect Protection (VT-rp) is supported.', null=True, verbose_name='Virtualization Technology with Redirect Protection (VT-rp)')),
                ('number_of_usb_ports', models.IntegerField(blank=True, help_text='The number of USB ports the processor has.', null=True, verbose_name='Number of USB Ports')),
                ('usb_revision', models.TextField(blank=True, help_text='The USB revision the processor supports.', null=True, verbose_name='USB Revision')),
                ('number_of_sata_ports', models.IntegerField(blank=True, help_text='The number of SATA ports the processor has.', null=True, verbose_name='Number of SATA Ports')),
                ('integrated_lan', models.BooleanField(blank=True, help_text='Whether integrated LAN is supported.', null=True, verbose_name='Integrated LAN')),
                ('general_purpose_io', models.BooleanField(blank=True, help_text='Whether general purpose I/O is supported.', null=True, verbose_name='General Purpose I/O')),
                ('uart', models.BooleanField(blank=True, help_text='Whether UART is supported.', null=True, verbose_name='UART')),
                ('number_of_sata_6_0_ports', models.IntegerField(blank=True, help_text='The number of SATA 6.0 Gb/s ports the processor has.', null=True, verbose_name='Number of SATA 6.0 Gb/s Ports')),
                ('interfaces_supported', models.TextField(blank=True, help_text='The interfaces supported by the processor.', null=True, verbose_name='Interfaces Supported')),
                ('processor_graphics', models.TextField(blank=True, help_text='The processor graphics the processor has.', null=True, verbose_name='Processor Graphics')),
                ('graphics_base_frequency', models.IntegerField(blank=True, help_text='The graphics base frequency the processor has. In hertz.', null=True, verbose_name='Graphics Base Frequency')),
                ('graphics_max_dynamic_frequency', models.IntegerField(blank=True, help_text='The graphics max dynamic frequency the processor has. In hertz.', null=True, verbose_name='Graphics Max Dynamic Frequency')),
                ('graphics_video_max_memory', models.TextField(blank=True, help_text='The graphics video max memory the processor has.', null=True, verbose_name='Graphics Video Max Memory')),
                ('graphics_output', models.TextField(blank=True, help_text='The graphics output the processor has.', null=True, verbose_name='Graphics Output')),
                ('_4k_support', models.BooleanField(blank=True, help_text='Whether 4K is supported.', null=True, verbose_name='4K Support')),
                ('max_resolution_hdmi', models.TextField(blank=True, help_text='The maximum resolution (HDMI) the processor supports.', null=True, verbose_name='Max Resolution (HDMI)')),
                ('max_resolution_dp', models.TextField(blank=True, help_text='The maximum resolution (DP) the processor supports.', null=True, verbose_name='Max Resolution (DP)')),
                ('max_resolution_edp_integrated_flat_panel', models.TextField(blank=True, help_text='The maximum resolution (eDP - Integrated Flat Panel) the processor supports.', null=True, verbose_name='Max Resolution (eDP - Integrated Flat Panel)')),
                ('max_resolution_vga', models.TextField(blank=True, help_text='The maximum resolution (VGA) the processor supports.', null=True, verbose_name='Max Resolution (VGA)')),
                ('directx_support', models.TextField(blank=True, help_text='The DirectX support the processor has.', null=True, verbose_name='DirectX Support')),
                ('opengl_support', models.TextField(blank=True, help_text='The OpenGL support the processor has.', null=True, verbose_name='OpenGL Support')),
                ('opencl_support', models.TextField(blank=True, help_text='The OpenCL support the processor has.', null=True, verbose_name='OpenCL Support')),
                ('intel_quick_sync_video', models.BooleanField(blank=True, help_text='Whether Intel Quick Sync Video is supported.', null=True, verbose_name='Intel Quick Sync Video')),
                ('intel_in_tru_3d_technology', models.BooleanField(blank=True, help_text='Whether Intel InTru 3D Technology is supported.', null=True, verbose_name='Intel InTru 3D Technology')),
                ('intel_clear_video_hd_technology', models.BooleanField(blank=True, help_text='Whether Intel Clear Video HD Technology is supported.', null=True, verbose_name='Intel Clear Video HD Technology')),
                ('intel_clear_video_technology', models.BooleanField(blank=True, help_text='Whether Intel Clear Video Technology is supported.', null=True, verbose_name='Intel Clear Video Technology')),
                ('number_of_displays_supported', models.IntegerField(blank=True, help_text='The number of displays supported by the processor.', null=True, verbose_name='Number of Displays Supported')),
                ('device_id', models.TextField(blank=True, help_text='The device ID of the processor.', null=True, verbose_name='Device ID')),
                ('execution_units', models.IntegerField(blank=True, help_text='The number of execution units the processor has.', null=True, verbose_name='Execution Units')),
                ('multi_format_codec_engines', models.IntegerField(blank=True, help_text='The number of multi-format codec engines the processor has.', null=True, verbose_name='Multi-format Codec Engines')),
                ('intel_on_demand_available_upgrades', models.TextField(blank=True, help_text='The Intel On Demand available upgrades the processor has.', null=True, verbose_name='Intel On Demand Available Upgrades')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalProcessor',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('product_collection', models.TextField(blank=True, help_text='The product family the processor belongs to.', null=True, verbose_name='Product Collection')),
                ('vertical_segment', models.TextField(blank=True, help_text='The vertical segment the processor belongs to.', null=True, verbose_name='Vertical Segment')),
                ('processor_number', models.TextField(blank=True, help_text='Server, Mobile, Desktop', null=True, verbose_name='Processor Number')),
                ('lithography', models.TextField(blank=True, help_text='Die size', null=True, verbose_name='Lithography')),
                ('use_conditions', models.TextField(blank=True, help_text='The use conditions the processor is designed for.', null=True, verbose_name='Use Conditions')),
                ('recommended_customer_price', models.TextField(blank=True, help_text='The recommended customer price for the processor.', null=True, verbose_name='Recommended Customer Price')),
                ('total_cores', models.IntegerField(blank=True, help_text='The number of cores the processor has.', null=True, verbose_name='Total Cores')),
                ('total_threads', models.IntegerField(blank=True, help_text='The number of threads the processor has.', null=True, verbose_name='Total Threads')),
                ('max_turbo_frequency', models.IntegerField(blank=True, help_text='The maximum turbo frequency the processor can reach. In hertz.', null=True, verbose_name='Max Turbo Frequency')),
                ('base_frequency', models.IntegerField(blank=True, help_text='The base frequency the processor can reach. In hertz.', null=True, verbose_name='Base Frequency')),
                ('l3_cache', models.TextField(blank=True, help_text='The L3 cache the processor has. In bytes.', null=True, verbose_name='L3 Cache')),
                ('cache', models.TextField(blank=True, help_text='The cache the processor has.', null=True, verbose_name='Cache')),
                ('upi_links', models.IntegerField(blank=True, help_text='The number of Intel Ultra Path Interconnect links the processor has.', null=True, verbose_name='UPI Links')),
                ('tdp', models.IntegerField(blank=True, help_text='The Thermal Design Power of the processor. In watts.', null=True, verbose_name='TDP')),
                ('turbo_boost_2_0_frequency', models.IntegerField(blank=True, help_text='The maximum turbo frequency the processor can reach. In hertz.', null=True, verbose_name='Turbo Boost 2.0 Frequency')),
                ('turbo_boost_max_technology_3_0_frequency', models.IntegerField(blank=True, help_text='The maximum turbo frequency the processor can reach. In hertz.', null=True, verbose_name='Turbo Boost Max Technology 3.0 Frequency')),
                ('number_of_qpi_links', models.IntegerField(blank=True, help_text='The number of Intel QuickPath Interconnect links the processor has.', null=True, verbose_name='Number of QPI Links')),
                ('bus_speed', models.IntegerField(blank=True, help_text='The bus speed of the processor. In hertz.', null=True, verbose_name='Bus Speed')),
                ('configurable_tdp_down_frequency', models.IntegerField(blank=True, help_text='The configurable TDP-down frequency of the processor. In hertz.', null=True, verbose_name='Configurable TDP-down Frequency')),
                ('configurable_tdp_down', models.IntegerField(blank=True, help_text='The configurable TDP-down of the processor. In watts.', null=True, verbose_name='Configurable TDP-down')),
                ('thermal_velocity_boost_frequency', models.IntegerField(blank=True, help_text='The thermal velocity boost frequency of the processor. In hertz.', null=True, verbose_name='Thermal Velocity Boost Frequency')),
                ('upi_speed', models.IntegerField(blank=True, help_text='The UPI speed of the processor. In giga-transfers per second.', null=True, verbose_name='UPI Speed')),
                ('speedstep_max_frequency', models.IntegerField(blank=True, help_text='The maximum SpeedStep frequency of the processor. In hertz.', null=True, verbose_name='SpeedStep Max Frequency')),
                ('performance_cores', models.IntegerField(blank=True, help_text='The number of performance cores the processor has.', null=True, verbose_name='Performance Cores')),
                ('efficiency_cores', models.IntegerField(blank=True, help_text='The number of efficiency cores the processor has.', null=True, verbose_name='Efficiency Cores')),
                ('configurable_tdp_up_frequency', models.IntegerField(blank=True, help_text='The configurable TDP-up frequency of the processor. In hertz.', null=True, verbose_name='Configurable TDP-up Frequency')),
                ('configurable_tdp_up', models.IntegerField(blank=True, help_text='The configurable TDP-up of the processor. In watts.', null=True, verbose_name='Configurable TDP-up')),
                ('p_core_base_frequency', models.IntegerField(blank=True, help_text='The base frequency of the P-Core. In hertz.', null=True, verbose_name='P-Core Base Frequency')),
                ('e_core_base_frequency', models.IntegerField(blank=True, help_text='The base frequency of the E-Core. In hertz.', null=True, verbose_name='E-Core Base Frequency')),
                ('deep_learning_boost', models.BooleanField(blank=True, help_text='Whether the processor has Deep Learning Boost.', null=True, verbose_name='Deep Learning Boost')),
                ('processor_base_power', models.IntegerField(blank=True, help_text='The processor base power. In watts.', null=True, verbose_name='Processor Base Power')),
                ('maximum_turbo_power', models.IntegerField(blank=True, help_text='The maximum turbo power. In watts.', null=True, verbose_name='Maximum Turbo Power')),
                ('marketing_status', models.TextField(blank=True, help_text='The marketing status of the processor.', null=True, verbose_name='Marketing Status')),
                ('launch_date', models.TextField(blank=True, help_text='The launch date of the processor.', null=True, verbose_name='Launch Date')),
                ('servicing_status', models.TextField(blank=True, help_text='The servicing status of the processor.', null=True, verbose_name='Servicing Status')),
                ('end_of_servicing_updates_date', models.DateField(blank=True, help_text='The end of servicing updates date of the processor.', null=True, verbose_name='End of Servicing Updates Date')),
                ('end_of_interactive_support_date', models.DateField(blank=True, help_text='The end of interactive support date of the processor.', null=True, verbose_name='End of Interactive Support Date')),
                ('embedded_options_available', models.BooleanField(blank=True, help_text='Whether embedded options are available.', null=True, verbose_name='Embedded Options Available')),
                ('datasheet', models.URLField(blank=True, help_text='The datasheet of the processor.', null=True, verbose_name='Datasheet')),
                ('product_brief_url', models.URLField(blank=True, help_text='The product brief URL of the processor.', null=True, verbose_name='Product Brief URL')),
                ('product_brief', models.TextField(blank=True, help_text='The product brief of the processor.', max_length=100, null=True, verbose_name='Product Brief')),
                ('additional_information_url', models.URLField(blank=True, help_text='The additional information URL of the processor.', null=True, verbose_name='Additional Information URL')),
                ('description', models.TextField(blank=True, help_text='The description of the processor.', null=True, verbose_name='Description')),
                ('included_items', models.TextField(blank=True, help_text='The included items of the processor.', null=True, verbose_name='Included Items')),
                ('extended_temperature_options', models.TextField(blank=True, help_text='The extended temperature options of the processor.', null=True, verbose_name='Extended Temperature Options')),
                ('max_memory_size', models.TextField(blank=True, help_text='The maximum memory size the processor supports.', null=True, verbose_name='Max Memory Size')),
                ('memory_types', models.TextField(blank=True, help_text='The memory types the processor supports.', null=True, verbose_name='Memory Types')),
                ('max_memory_speed', models.IntegerField(blank=True, help_text='The maximum memory speed the processor supports. In hertz.', null=True, verbose_name='Max Memory Speed')),
                ('max_number_of_memory_channels', models.IntegerField(blank=True, help_text='The maximum number of memory channels the processor supports.', null=True, verbose_name='Max Number of Memory Channels')),
                ('max_hbm_memory_size', models.TextField(blank=True, help_text='The maximum HBM memory size the processor supports.', null=True, verbose_name='Max HBM Memory Size')),
                ('ecc_memory_supported', models.BooleanField(blank=True, help_text='Whether ECC memory is supported.', null=True, verbose_name='ECC Memory Supported')),
                ('max_memory_bandwidth', models.IntegerField(blank=True, help_text='The maximum memory bandwidth the processor supports. In bytes per second.', null=True, verbose_name='Max Memory Bandwidth')),
                ('physical_address_extensions', models.IntegerField(blank=True, help_text='The physical address extensions the processor supports.', null=True, verbose_name='Physical Address Extensions')),
                ('scalability', models.TextField(blank=True, help_text='The scalability of the processor.', null=True, verbose_name='Scalability')),
                ('pci_express_revision', models.TextField(blank=True, help_text='The PCI Express revision the processor supports.', null=True, verbose_name='PCI Express Revision')),
                ('max_amount_of_pci_express_lanes', models.IntegerField(blank=True, help_text='The maximum amount of PCI Express lanes the processor supports.', null=True, verbose_name='Max Amount of PCI Express Lanes')),
                ('pci_express_configurations', models.TextField(blank=True, help_text='The PCI Express configurations the processor supports.', null=True, verbose_name='PCI Express Configurations')),
                ('microprocessor_pcie_revision', models.TextField(blank=True, help_text='The microprocessor PCIe revision the processor supports.', null=True, verbose_name='Microprocessor PCIe Revision')),
                ('thunderbolt_4_support', models.BooleanField(blank=True, help_text='Whether Thunderbolt 4 is supported.', null=True, verbose_name='Thunderbolt 4 Support')),
                ('chipset_pch_pcie_revision', models.TextField(blank=True, help_text='The chipset PCH PCIe revision the processor supports.', null=True, verbose_name='Chipset PCH PCIe Revision')),
                ('direct_media_interface_revision', models.TextField(blank=True, help_text='The direct media interface revision the processor supports.', null=True, verbose_name='Direct Media Interface Revision')),
                ('max_amount_of_direct_media_interface_lanes', models.IntegerField(blank=True, help_text='The maximum amount of direct media interface lanes the processor supports.', null=True, verbose_name='Max Amount of Direct Media Interface Lanes')),
                ('socket_supported', models.TextField(blank=True, help_text='The socket supported by the processor.', null=True, verbose_name='Socket Supported')),
                ('t_case', models.IntegerField(blank=True, help_text='The T case of the processor. In celsius.', null=True, verbose_name='T Case')),
                ('package_size', models.TextField(blank=True, help_text='The package size of the processor.', null=True, verbose_name='Package Size')),
                ('max_cpu_configuration', models.TextField(blank=True, help_text='The maximum CPU configuration the processor supports.', null=True, verbose_name='Max CPU Configuration')),
                ('t_junction', models.IntegerField(blank=True, help_text='The T junction of the processor. In celsius.', null=True, verbose_name='T Junction')),
                ('thermal_solution_specification', models.TextField(blank=True, help_text='The thermal solution specification of the processor.', null=True, verbose_name='Thermal Solution Specification')),
                ('thermal_velocity_boost_temperature', models.IntegerField(blank=True, help_text='The thermal velocity boost temperature of the processor. In celsius.', null=True, verbose_name='Thermal Velocity Boost Temperature')),
                ('operating_temperature_max', models.IntegerField(blank=True, help_text='The maximum operating temperature of the processor. In celsius.', null=True, verbose_name='Operating Temperature Max')),
                ('operating_temperature_min', models.IntegerField(blank=True, help_text='The minimum operating temperature of the processor. In celsius.', null=True, verbose_name='Operating Temperature Min')),
                ('package_carrier', models.TextField(blank=True, help_text='The package carrier of the processor.', null=True, verbose_name='Package Carrier')),
                ('dts_max', models.IntegerField(blank=True, help_text='The Digital Thermal Sensors max of the processor. In celsius.', null=True, verbose_name='DTS Max')),
                ('operating_temperature_range', models.TextField(blank=True, help_text='The operating temperature range of the processor.', null=True, verbose_name='Operating Temperature Range')),
                ('optane_supported', models.BooleanField(blank=True, help_text='Whether Optane is supported.', null=True, verbose_name='Optane Supported')),
                ('speed_shift_technology', models.BooleanField(blank=True, help_text='Whether speed shift technology is supported.', null=True, verbose_name='Speed Shift Technology')),
                ('turbo_boost_max_technology_3_0', models.BooleanField(blank=True, help_text='Whether turbo boost max technology 3.0 is supported.', null=True, verbose_name='Turbo Boost Max Technology 3.0')),
                ('turbo_boost_technology', models.TextField(blank=True, help_text='The turbo boost technology the processor supports.', null=True, verbose_name='Turbo Boost Technology')),
                ('hyper_threading_technology', models.BooleanField(blank=True, help_text='Whether hyper-threading technology is supported.', null=True, verbose_name='Hyper-Threading Technology')),
                ('transactional_synchronization_extensions', models.BooleanField(blank=True, help_text='Whether transactional synchronization extensions are supported.', null=True, verbose_name='Transactional Synchronization Extensions')),
                ('_64_bit', models.BooleanField(blank=True, help_text='Whether 64-bit is supported.', null=True, verbose_name='64-bit')),
                ('instruction_set_extensions', models.TextField(blank=True, help_text='The instruction set extensions the processor supports.', null=True, verbose_name='Instruction Set Extensions')),
                ('avx_512_fma_units', models.IntegerField(blank=True, help_text='The number of AVX-512 FMA units the processor has.', null=True, verbose_name='AVX-512 FMA Units')),
                ('enhanced_speedstep_technology', models.BooleanField(blank=True, help_text='Whether enhanced speedstep technology is supported.', null=True, verbose_name='Enhanced SpeedStep Technology')),
                ('volume_management_device', models.BooleanField(blank=True, help_text='Whether volume management device is supported.', null=True, verbose_name='Volume Management Device')),
                ('instruction_set', models.TextField(blank=True, help_text='The instruction set the processor supports.', null=True, verbose_name='Instruction Set')),
                ('idle_states', models.BooleanField(blank=True, help_text='Whether idle states are supported.', null=True, verbose_name='Idle States')),
                ('thermal_monitoring_technologies', models.BooleanField(blank=True, help_text='Whether thermal monitoring technologies are supported.', null=True, verbose_name='Thermal Monitoring Technologies')),
                ('integrated_quick_assist_technology', models.BooleanField(blank=True, help_text='Whether Integrated Quick assist technology is supported.', null=True, verbose_name='Integrated Quick Assist Technology')),
                ('management_engine_firmware_version', models.TextField(blank=True, help_text='The management engine firmware version the processor supports.', null=True, verbose_name='Management Engine Firmware Version')),
                ('quiet_system_technology', models.BooleanField(blank=True, help_text='Whether quiet system technology is supported.', null=True, verbose_name='Quiet System Technology')),
                ('my_wifi_technology', models.BooleanField(blank=True, help_text='Whether My WiFi technology is supported.', null=True, verbose_name='My WiFi Technology')),
                ('flex_memory_access', models.BooleanField(blank=True, help_text='Whether flex memory access is supported.', null=True, verbose_name='Flex Memory Access')),
                ('identity_protection_technology', models.BooleanField(blank=True, help_text='Whether identity protection technology is supported.', null=True, verbose_name='Identity Protection Technology')),
                ('speed_select_technology_performance_profile', models.BooleanField(blank=True, help_text='Whether speed select technology performance profile is supported.', null=True, verbose_name='Speed Select Technology Performance Profile')),
                ('speed_select_technology_base_frequency', models.BooleanField(blank=True, help_text='Whether speed select technology base frequency is supported.', null=True, verbose_name='Speed Select Technology Base Frequency')),
                ('resource_director_technology', models.BooleanField(blank=True, help_text='Whether RDT is supported.', null=True, verbose_name='RDT')),
                ('demand_based_switching', models.BooleanField(blank=True, help_text='Whether demand based switching is supported.', null=True, verbose_name='Demand Based Switching')),
                ('thermal_velocity_boost', models.BooleanField(blank=True, help_text='Whether thermal velocity boost is supported.', null=True, verbose_name='Thermal Velocity Boost')),
                ('speed_select_technology_core_power', models.BooleanField(blank=True, help_text='Whether speed select technology core power is supported.', null=True, verbose_name='Speed Select Technology Core Power')),
                ('speed_select_technology_turbo_frequency', models.BooleanField(blank=True, help_text='Whether speed select technology turbo frequency is supported.', null=True, verbose_name='Speed Select Technology Turbo Frequency')),
                ('gaussian_neural_accelerator', models.BooleanField(blank=True, help_text='Whether gaussian & neural accelerator is supported.', null=True, verbose_name='Gaussian & Neural Accelerator')),
                ('high_priority_cores', models.BooleanField(blank=True, help_text='Whether high priority cores is supported.', null=True, verbose_name='High Priority Cores')),
                ('high_priority_cores_frequency', models.BooleanField(blank=True, help_text='Whether high priority cores frequency is supported.', null=True, verbose_name='High Priority Cores Frequency')),
                ('low_priority_cores', models.BooleanField(blank=True, help_text='Whether low priority cores is supported.', null=True, verbose_name='Low Priority Cores')),
                ('low_priority_cores_frequency', models.BooleanField(blank=True, help_text='Whether low priority cores frequency is supported.', null=True, verbose_name='Low Priority Cores Frequency')),
                ('image_processing_unit', models.BooleanField(blank=True, help_text='Whether image processing unit is supported.', null=True, verbose_name='Image Processing Unit')),
                ('smart_sound_technology', models.BooleanField(blank=True, help_text='Whether smart sound technology is supported.', null=True, verbose_name='Smart Sound Technology')),
                ('wake_on_voice', models.BooleanField(blank=True, help_text='Whether wake on voice is supported.', null=True, verbose_name='Wake on Voice')),
                ('high_definition_audio', models.BooleanField(blank=True, help_text='Whether high definition audio is supported.', null=True, verbose_name='High Definition Audio')),
                ('adaptix_technology', models.BooleanField(blank=True, help_text='Whether Adaptix technology is supported.', null=True, verbose_name='Adaptix Technology')),
                ('time_coordinated_computing', models.BooleanField(blank=True, help_text='Whether time coordinated computing is supported.', null=True, verbose_name='Time Coordinated Computing')),
                ('mipi_soundwire_technology', models.BooleanField(blank=True, help_text='Whether MIPI SoundWire technology is supported.', null=True, verbose_name='MIPI SoundWire Technology')),
                ('on_demand_feature_activation', models.BooleanField(blank=True, help_text='Whether on-demand feature activation is supported.', null=True, verbose_name='On-Demand Feature Activation')),
                ('data_streaming_accelerator', models.BooleanField(blank=True, help_text='Whether Data Streaming Accelerator (DSA) is supported.', null=True, verbose_name='Data Streaming Accelerator (DSA)')),
                ('advanced_matrix_extensions', models.BooleanField(blank=True, help_text='Whether advanced matrix extensions is supported.', null=True, verbose_name='Advanced Matrix Extensions')),
                ('quick_assist_technology', models.BooleanField(blank=True, help_text='Whether quick assist technology is supported.', null=True, verbose_name='Quick Assist Technology')),
                ('dynamic_load_balancer', models.BooleanField(blank=True, help_text='Whether Dynamic Load Balancer (DLB) is supported.', null=True, verbose_name='Dynamic Load Balancer (DLB)')),
                ('in_memory_analytics_accelerator', models.BooleanField(blank=True, help_text='Whether In-Memory Analytics Accelerator (IAA) is supported.', null=True, verbose_name='In-Memory Analytics Accelerator (IAA)')),
                ('vran_boost', models.BooleanField(blank=True, help_text='Whether VRAN Boost is supported.', null=True, verbose_name='VRAN Boost')),
                ('vpro_eligibility', models.TextField(blank=True, help_text='The vPro eligibility of the processor.', null=True, verbose_name='vPro Eligibility')),
                ('quick_assist_software_acceleration', models.BooleanField(blank=True, help_text='Whether quick assist software acceleration is supported.', null=True, verbose_name='Quick Assist Software Acceleration')),
                ('aes_new_instructions', models.BooleanField(blank=True, help_text='Whether AES new instructions is supported.', null=True, verbose_name='AES New Instructions')),
                ('trusted_execution_technology', models.BooleanField(blank=True, help_text='Whether trusted execution technology is supported.', null=True, verbose_name='Trusted Execution Technology')),
                ('execute_disable_bit', models.BooleanField(blank=True, help_text='Whether execute disable bit is supported.', null=True, verbose_name='Execute Disable Bit')),
                ('run_sure_technology', models.BooleanField(blank=True, help_text='Whether run sure technology is supported.', null=True, verbose_name='Run Sure Technology')),
                ('mode_based_execute_control', models.BooleanField(blank=True, help_text='Whether Mode-based Execute Control (MBEC) is supported.', null=True, verbose_name='Mode-based Execute Control (MBEC)')),
                ('virtualization_technology', models.BooleanField(blank=True, help_text='Whether Virtualization Technology (VT-x) is supported.', null=True, verbose_name='Virtualization Technology (VT-x)')),
                ('virtualization_technology_for_directed_io', models.BooleanField(blank=True, help_text='Whether Virtualization Technology for Directed I/O (VT-d) is supported.', null=True, verbose_name='Virtualization Technology for Directed I/O (VT-d)')),
                ('virtualization_technology_with_extended_page_tables', models.BooleanField(blank=True, help_text='Whether Virtualization Technology with Extended Page Tables (EPT) is supported.', null=True, verbose_name='Virtualization Technology with Extended Page Tables (EPT)')),
                ('secure_key', models.BooleanField(blank=True, help_text='Whether secure key is supported.', null=True, verbose_name='Secure Key')),
                ('os_guard', models.BooleanField(blank=True, help_text='Whether OS guard is supported.', null=True, verbose_name='OS Guard')),
                ('software_guard_extensions', models.BooleanField(blank=True, help_text='Whether Software Guard Extensions (SGX) is supported.', null=True, verbose_name='Software Guard Extensions (SGX)')),
                ('boot_guard', models.BooleanField(blank=True, help_text='Whether boot guard is supported.', null=True, verbose_name='Boot Guard')),
                ('memory_protection_extensions', models.BooleanField(blank=True, help_text='Whether Memory Protection Extensions (MPX) is supported.', null=True, verbose_name='Memory Protection Extensions (MPX)')),
                ('stable_image_platform_program', models.BooleanField(blank=True, help_text='Whether Stable Image Platform Program (SIPP) is supported.', null=True, verbose_name='Stable Image Platform Program (SIPP)')),
                ('maximum_enclave_size_for_sgx', models.BooleanField(blank=True, help_text='Whether maximum enclave size for SGX is supported.', null=True, verbose_name='Maximum Enclave Size for SGX')),
                ('crypto_acceleration', models.BooleanField(blank=True, help_text='Whether crypto acceleration is supported.', null=True, verbose_name='Crypto Acceleration')),
                ('platform_firmware_resilience', models.BooleanField(blank=True, help_text='Whether Platform Firmware Resilience is supported.', null=True, verbose_name='Platform Firmware Resilience')),
                ('total_memory_encryption', models.BooleanField(blank=True, help_text='Whether total memory encryption is supported.', null=True, verbose_name='Total Memory Encryption')),
                ('control_flow_enforcement_technology', models.BooleanField(blank=True, help_text='Whether Control-flow Enforcement Technology is supported.', null=True, verbose_name='Control-flow Enforcement Technology')),
                ('threat_detection_technology', models.BooleanField(blank=True, help_text='Whether Threat Detection Technology (TDT) is supported.', null=True, verbose_name='Threat Detection Technology (TDT)')),
                ('active_management_technology', models.BooleanField(blank=True, help_text='Whether Active Management Technology (AMT) is supported.', null=True, verbose_name='Active Management Technology (AMT)')),
                ('remote_platform_erase', models.BooleanField(blank=True, help_text='Whether Remote Platform Erase (RPE) is supported.', null=True, verbose_name='Remote Platform Erase (RPE)')),
                ('one_click_recovery', models.BooleanField(blank=True, help_text='Whether One-click Recovery is supported.', null=True, verbose_name='One-click Recovery')),
                ('total_memory_encryption_multi_key', models.BooleanField(blank=True, help_text='Whether Total Memory Encryption Multi-Key is supported.', null=True, verbose_name='Total Memory Encryption Multi-Key')),
                ('virtualization_technology_with_redirect_protection', models.BooleanField(blank=True, help_text='Whether Virtualization Technology with Redirect Protection (VT-rp) is supported.', null=True, verbose_name='Virtualization Technology with Redirect Protection (VT-rp)')),
                ('number_of_usb_ports', models.IntegerField(blank=True, help_text='The number of USB ports the processor has.', null=True, verbose_name='Number of USB Ports')),
                ('usb_revision', models.TextField(blank=True, help_text='The USB revision the processor supports.', null=True, verbose_name='USB Revision')),
                ('number_of_sata_ports', models.IntegerField(blank=True, help_text='The number of SATA ports the processor has.', null=True, verbose_name='Number of SATA Ports')),
                ('integrated_lan', models.BooleanField(blank=True, help_text='Whether integrated LAN is supported.', null=True, verbose_name='Integrated LAN')),
                ('general_purpose_io', models.BooleanField(blank=True, help_text='Whether general purpose I/O is supported.', null=True, verbose_name='General Purpose I/O')),
                ('uart', models.BooleanField(blank=True, help_text='Whether UART is supported.', null=True, verbose_name='UART')),
                ('number_of_sata_6_0_ports', models.IntegerField(blank=True, help_text='The number of SATA 6.0 Gb/s ports the processor has.', null=True, verbose_name='Number of SATA 6.0 Gb/s Ports')),
                ('interfaces_supported', models.TextField(blank=True, help_text='The interfaces supported by the processor.', null=True, verbose_name='Interfaces Supported')),
                ('processor_graphics', models.TextField(blank=True, help_text='The processor graphics the processor has.', null=True, verbose_name='Processor Graphics')),
                ('graphics_base_frequency', models.IntegerField(blank=True, help_text='The graphics base frequency the processor has. In hertz.', null=True, verbose_name='Graphics Base Frequency')),
                ('graphics_max_dynamic_frequency', models.IntegerField(blank=True, help_text='The graphics max dynamic frequency the processor has. In hertz.', null=True, verbose_name='Graphics Max Dynamic Frequency')),
                ('graphics_video_max_memory', models.TextField(blank=True, help_text='The graphics video max memory the processor has.', null=True, verbose_name='Graphics Video Max Memory')),
                ('graphics_output', models.TextField(blank=True, help_text='The graphics output the processor has.', null=True, verbose_name='Graphics Output')),
                ('_4k_support', models.BooleanField(blank=True, help_text='Whether 4K is supported.', null=True, verbose_name='4K Support')),
                ('max_resolution_hdmi', models.TextField(blank=True, help_text='The maximum resolution (HDMI) the processor supports.', null=True, verbose_name='Max Resolution (HDMI)')),
                ('max_resolution_dp', models.TextField(blank=True, help_text='The maximum resolution (DP) the processor supports.', null=True, verbose_name='Max Resolution (DP)')),
                ('max_resolution_edp_integrated_flat_panel', models.TextField(blank=True, help_text='The maximum resolution (eDP - Integrated Flat Panel) the processor supports.', null=True, verbose_name='Max Resolution (eDP - Integrated Flat Panel)')),
                ('max_resolution_vga', models.TextField(blank=True, help_text='The maximum resolution (VGA) the processor supports.', null=True, verbose_name='Max Resolution (VGA)')),
                ('directx_support', models.TextField(blank=True, help_text='The DirectX support the processor has.', null=True, verbose_name='DirectX Support')),
                ('opengl_support', models.TextField(blank=True, help_text='The OpenGL support the processor has.', null=True, verbose_name='OpenGL Support')),
                ('opencl_support', models.TextField(blank=True, help_text='The OpenCL support the processor has.', null=True, verbose_name='OpenCL Support')),
                ('intel_quick_sync_video', models.BooleanField(blank=True, help_text='Whether Intel Quick Sync Video is supported.', null=True, verbose_name='Intel Quick Sync Video')),
                ('intel_in_tru_3d_technology', models.BooleanField(blank=True, help_text='Whether Intel InTru 3D Technology is supported.', null=True, verbose_name='Intel InTru 3D Technology')),
                ('intel_clear_video_hd_technology', models.BooleanField(blank=True, help_text='Whether Intel Clear Video HD Technology is supported.', null=True, verbose_name='Intel Clear Video HD Technology')),
                ('intel_clear_video_technology', models.BooleanField(blank=True, help_text='Whether Intel Clear Video Technology is supported.', null=True, verbose_name='Intel Clear Video Technology')),
                ('number_of_displays_supported', models.IntegerField(blank=True, help_text='The number of displays supported by the processor.', null=True, verbose_name='Number of Displays Supported')),
                ('device_id', models.TextField(blank=True, help_text='The device ID of the processor.', null=True, verbose_name='Device ID')),
                ('execution_units', models.IntegerField(blank=True, help_text='The number of execution units the processor has.', null=True, verbose_name='Execution Units')),
                ('multi_format_codec_engines', models.IntegerField(blank=True, help_text='The number of multi-format codec engines the processor has.', null=True, verbose_name='Multi-format Codec Engines')),
                ('intel_on_demand_available_upgrades', models.TextField(blank=True, help_text='The Intel On Demand available upgrades the processor has.', null=True, verbose_name='Intel On Demand Available Upgrades')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical processor',
                'verbose_name_plural': 'historical processors',
                'db_table': 'ark_processors_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
