# Generated by Django 4.2.7 on 2023-11-30 02:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Eans',
            fields=[
                ('ean', models.TextField(help_text='EAN', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, help_text='Product name', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
            ],
            options={
                'verbose_name': 'European Article Number',
                'verbose_name_plural': 'European Article Numbers',
                'db_table': 'eans',
            },
        ),
        migrations.CreateModel(
            name='SitemapArticle',
            fields=[
                ('loc', models.URLField(help_text='URL', primary_key=True, serialize=False)),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
            ],
            options={
                'verbose_name': 'Sitemap article',
                'verbose_name_plural': 'Sitemap articles',
                'db_table': 'webhallen_sitemap_article',
            },
        ),
        migrations.CreateModel(
            name='SitemapCampaign',
            fields=[
                ('loc', models.URLField(help_text='URL', primary_key=True, serialize=False)),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
            ],
            options={
                'verbose_name': 'Sitemap campaign',
                'verbose_name_plural': 'Sitemap campaigns',
                'db_table': 'webhallen_sitemap_campaign',
            },
        ),
        migrations.CreateModel(
            name='SitemapCampaignList',
            fields=[
                ('loc', models.URLField(help_text='URL', primary_key=True, serialize=False)),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
            ],
            options={
                'verbose_name': 'Sitemap campaign list',
                'verbose_name_plural': 'Sitemap campaign lists',
                'db_table': 'webhallen_sitemap_campaign_list',
            },
        ),
        migrations.CreateModel(
            name='SitemapCategory',
            fields=[
                ('loc', models.URLField(help_text='URL', primary_key=True, serialize=False)),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
            ],
            options={
                'verbose_name': 'Sitemap category',
                'verbose_name_plural': 'Sitemap categories',
                'db_table': 'webhallen_sitemap_category',
            },
        ),
        migrations.CreateModel(
            name='SitemapHome',
            fields=[
                ('loc', models.URLField(help_text='URL', primary_key=True, serialize=False)),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
            ],
            options={
                'verbose_name': 'Sitemap home',
                'verbose_name_plural': 'Sitemap homes',
                'db_table': 'webhallen_sitemap_home',
            },
        ),
        migrations.CreateModel(
            name='SitemapInfoPages',
            fields=[
                ('loc', models.URLField(help_text='URL', primary_key=True, serialize=False)),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
            ],
            options={
                'verbose_name': 'Sitemap info page',
                'verbose_name_plural': 'Sitemap info pages',
                'db_table': 'webhallen_sitemap_info_pages',
            },
        ),
        migrations.CreateModel(
            name='SitemapManufacturer',
            fields=[
                ('loc', models.URLField(help_text='URL', primary_key=True, serialize=False)),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
            ],
            options={
                'verbose_name': 'Sitemap manufacturer',
                'verbose_name_plural': 'Sitemap manufacturers',
                'db_table': 'webhallen_sitemap_manufacturer',
            },
        ),
        migrations.CreateModel(
            name='SitemapProduct',
            fields=[
                ('loc', models.URLField(help_text='URL', primary_key=True, serialize=False)),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
            ],
            options={
                'verbose_name': 'Sitemap product',
                'verbose_name_plural': 'Sitemap products',
                'db_table': 'webhallen_sitemap_product',
            },
        ),
        migrations.CreateModel(
            name='SitemapRoot',
            fields=[
                ('loc', models.URLField(help_text='URL', primary_key=True, serialize=False)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
            ],
            options={
                'verbose_name': 'Sitemap root',
                'verbose_name_plural': 'Sitemap roots',
                'db_table': 'webhallen_sitemap_root',
            },
        ),
        migrations.CreateModel(
            name='SitemapSection',
            fields=[
                ('loc', models.URLField(help_text='URL', primary_key=True, serialize=False)),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
            ],
            options={
                'verbose_name': 'Sitemap section',
                'verbose_name_plural': 'Sitemap sections',
                'db_table': 'webhallen_sitemap_section',
            },
        ),
        migrations.CreateModel(
            name='WebhallenJSON',
            fields=[
                ('product_id', models.IntegerField(help_text='Product ID', primary_key=True, serialize=False)),
                ('product_json', models.JSONField(help_text='Product JSON')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
            ],
            options={
                'verbose_name': 'Webhallen JSON',
                'verbose_name_plural': 'Webhallen JSON objects',
                'db_table': 'webhallen_json',
            },
        ),
        migrations.CreateModel(
            name='WebhallenProduct',
            fields=[
                ('product_id', models.IntegerField(help_text='Product ID', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
                ('minimum_rank_level', models.IntegerField(blank=True, help_text='Minimum rank level', null=True)),
                ('images_zoom', models.TextField(blank=True, help_text='Comma separated list of zoom images', null=True)),
                ('images_large', models.TextField(blank=True, help_text='Comma separated list of large images', null=True)),
                ('images_thumb', models.TextField(blank=True, help_text='Comma separated list of thumbnail images', null=True)),
                ('name', models.TextField(blank=True, help_text='Product name', null=True)),
                ('price', models.TextField(blank=True, help_text='Product price', null=True)),
                ('vat', models.TextField(blank=True, help_text='Product VAT', null=True)),
                ('price_end_at', models.DateTimeField(blank=True, help_text='Price end at', null=True)),
                ('price_nearly_over', models.BooleanField(help_text='Price nearly over', null=True)),
                ('price_flash_sale', models.BooleanField(help_text='Price flash sale', null=True)),
                ('price_type', models.TextField(blank=True, help_text='Price type', null=True)),
                ('regular_price', models.TextField(blank=True, help_text='Regular price', null=True)),
                ('regular_price_type', models.TextField(blank=True, help_text='Regular price type', null=True)),
                ('regular_price_end_at', models.DateTimeField(blank=True, help_text='Regular price end at', null=True)),
                ('regular_price_nearly_over', models.BooleanField(help_text='Regular price nearly over', null=True)),
                ('regular_price_flash_sale', models.BooleanField(help_text='Regular price flash sale', null=True)),
                ('lowest_price', models.TextField(blank=True, help_text='Lowest price', null=True)),
                ('lowest_price_type', models.TextField(blank=True, help_text='Lowest price type', null=True)),
                ('lowest_price_end_at', models.DateTimeField(blank=True, help_text='Lowest price end at', null=True)),
                ('lowest_price_nearly_over', models.BooleanField(help_text='Lowest price nearly over', null=True)),
                ('lowest_price_flash_sale', models.BooleanField(help_text='Lowest price flash sale', null=True)),
                ('level_one_price', models.TextField(blank=True, help_text='Level one price', null=True)),
                ('level_one_price_type', models.TextField(blank=True, help_text='Level one price type', null=True)),
                ('level_one_price_end_at', models.DateTimeField(blank=True, help_text='Level one price end at', null=True)),
                ('level_one_price_nearly_over', models.BooleanField(help_text='Level one price nearly over', null=True)),
                ('level_one_price_flash_sale', models.BooleanField(help_text='Level one price flash sale', null=True)),
                ('description', models.TextField(blank=True, help_text='Product description', null=True)),
                ('meta_title', models.TextField(blank=True, help_text='Product meta title', null=True)),
                ('meta_description', models.TextField(blank=True, help_text='Product meta description', null=True)),
                ('canonical_url', models.TextField(blank=True, help_text='Product canonical URL', null=True)),
                ('release_date', models.TextField(blank=True, help_text='Product release date', null=True)),
                ('section_id', models.IntegerField(blank=True, help_text='Section ID', null=True)),
                ('is_digital', models.BooleanField(help_text='Is digital', null=True)),
                ('discontinued', models.BooleanField(help_text='Discontinued', null=True)),
                ('category_tree', models.TextField(blank=True, help_text='Category tree', null=True)),
                ('main_category_path', models.TextField(blank=True, help_text='Comma separated main category path', null=True)),
                ('manufacturer', models.IntegerField(blank=True, help_text='Manufacturer', null=True)),
                ('part_numbers', models.TextField(blank=True, help_text='Comma separated list of part numbers', null=True)),
                ('eans', models.TextField(blank=True, help_text='Comma separated list of EANs', null=True)),
                ('thumbnail', models.TextField(blank=True, help_text='Thumbnail URL', null=True)),
                ('average_rating', models.FloatField(blank=True, help_text='Average rating', null=True)),
                ('average_rating_type', models.TextField(blank=True, help_text='Average rating type', null=True)),
                ('energy_marking_rating', models.TextField(blank=True, help_text='Energy marking rating (F to A)', null=True)),
                ('energy_marking_label', models.TextField(blank=True, help_text='Energy rating label link', null=True)),
                ('package_size_id', models.IntegerField(blank=True, help_text='Package size ID', null=True)),
                ('status_codes', models.TextField(blank=True, help_text='Comma separated list of status codes', null=True)),
                ('long_delivery_notice', models.TextField(blank=True, help_text='Long delivery notice', null=True)),
                ('categories', models.TextField(blank=True, help_text='Comma separated list of categories', null=True)),
                ('phone_subscription', models.BooleanField(help_text='Phone subscription', null=True)),
                ('highlighted_review_id', models.IntegerField(blank=True, help_text='Highlighted review ID', null=True)),
                ('highlighted_review_text', models.TextField(blank=True, help_text='Highlighted review text', null=True)),
                ('highlighted_review_rating', models.IntegerField(blank=True, help_text='Highlighted review rating', null=True)),
                ('highlighted_review_upvotes', models.IntegerField(blank=True, help_text='Highlighted review upvotes', null=True)),
                ('highlighted_review_downvotes', models.IntegerField(blank=True, help_text='Highlighted review downvotes', null=True)),
                ('highlighted_review_verified', models.BooleanField(help_text='Highlighted review verified', null=True)),
                ('highlighted_review_created', models.DateTimeField(blank=True, help_text='Highlighted review created', null=True)),
                ('highlighted_review_is_anonymous', models.BooleanField(help_text='Highlighted review is anonymous', null=True)),
                ('highlighted_review_is_employee', models.BooleanField(help_text='Highlighted review is employee', null=True)),
                ('highlighted_review_product_id', models.IntegerField(blank=True, help_text='Highlighted product ID', null=True)),
                ('highlighted_review_user_id', models.TextField(blank=True, help_text='Highlighted review user ID - Anonymous if anonymous', null=True)),
                ('highlighted_review_is_hype', models.BooleanField(help_text='Highlighted review is hype', null=True)),
                ('is_fyndware', models.BooleanField(help_text='Is Fyndware', null=True)),
                ('fyndware_of', models.IntegerField(blank=True, help_text='The product ID of the real product', null=True)),
                ('fyndware_of_description', models.TextField(blank=True, help_text='Fyndware of description', null=True)),
                ('fyndware_class', models.IntegerField(blank=True, help_text='Fyndware class', null=True)),
                ('main_title', models.TextField(blank=True, help_text='Main title', null=True)),
                ('sub_title', models.TextField(blank=True, help_text='Sub title', null=True)),
                ('is_shippable', models.BooleanField(help_text='Is shippable', null=True)),
                ('is_collectable', models.BooleanField(help_text='Is collectable', null=True)),
                ('excluded_shipping_methods', models.TextField(blank=True, help_text='Excluded shipping methods', null=True)),
                ('insurance_id', models.IntegerField(blank=True, help_text='Insurance ID', null=True)),
                ('possible_delivery_methods', models.TextField(blank=True, help_text='Possible delivery methods', null=True)),
            ],
            options={
                'verbose_name': 'Webhallen product',
                'verbose_name_plural': 'Webhallen products',
                'db_table': 'webhallen_product',
            },
        ),
        migrations.CreateModel(
            name='WebhallenSection',
            fields=[
                ('section_id', models.IntegerField(help_text='Section ID', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Updated')),
                ('meta_title', models.TextField(blank=True, help_text='Meta title', null=True)),
                ('active', models.BooleanField(help_text='Active', null=True)),
                ('icon', models.TextField(blank=True, help_text='Icon', null=True)),
                ('icon_url', models.URLField(blank=True, help_text='Icon URL', null=True)),
                ('name', models.TextField(blank=True, help_text='Name', null=True)),
                ('url', models.URLField(blank=True, help_text='URL', null=True)),
            ],
            options={
                'verbose_name': 'Webhallen section',
                'verbose_name_plural': 'Webhallen sections',
                'db_table': 'webhallen_section',
            },
        ),
        migrations.CreateModel(
            name='HistoricalWebhallenSection',
            fields=[
                ('section_id', models.IntegerField(db_index=True, help_text='Section ID')),
                ('meta_title', models.TextField(blank=True, help_text='Meta title', null=True)),
                ('active', models.BooleanField(help_text='Active', null=True)),
                ('icon', models.TextField(blank=True, help_text='Icon', null=True)),
                ('icon_url', models.URLField(blank=True, help_text='Icon URL', null=True)),
                ('name', models.TextField(blank=True, help_text='Name', null=True)),
                ('url', models.URLField(blank=True, help_text='URL', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Webhallen section',
                'verbose_name_plural': 'historical Webhallen sections',
                'db_table': 'webhallen_section_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalWebhallenProduct',
            fields=[
                ('product_id', models.IntegerField(db_index=True, help_text='Product ID')),
                ('minimum_rank_level', models.IntegerField(blank=True, help_text='Minimum rank level', null=True)),
                ('images_zoom', models.TextField(blank=True, help_text='Comma separated list of zoom images', null=True)),
                ('images_large', models.TextField(blank=True, help_text='Comma separated list of large images', null=True)),
                ('images_thumb', models.TextField(blank=True, help_text='Comma separated list of thumbnail images', null=True)),
                ('name', models.TextField(blank=True, help_text='Product name', null=True)),
                ('price', models.TextField(blank=True, help_text='Product price', null=True)),
                ('vat', models.TextField(blank=True, help_text='Product VAT', null=True)),
                ('price_end_at', models.DateTimeField(blank=True, help_text='Price end at', null=True)),
                ('price_nearly_over', models.BooleanField(help_text='Price nearly over', null=True)),
                ('price_flash_sale', models.BooleanField(help_text='Price flash sale', null=True)),
                ('price_type', models.TextField(blank=True, help_text='Price type', null=True)),
                ('regular_price', models.TextField(blank=True, help_text='Regular price', null=True)),
                ('regular_price_type', models.TextField(blank=True, help_text='Regular price type', null=True)),
                ('regular_price_end_at', models.DateTimeField(blank=True, help_text='Regular price end at', null=True)),
                ('regular_price_nearly_over', models.BooleanField(help_text='Regular price nearly over', null=True)),
                ('regular_price_flash_sale', models.BooleanField(help_text='Regular price flash sale', null=True)),
                ('lowest_price', models.TextField(blank=True, help_text='Lowest price', null=True)),
                ('lowest_price_type', models.TextField(blank=True, help_text='Lowest price type', null=True)),
                ('lowest_price_end_at', models.DateTimeField(blank=True, help_text='Lowest price end at', null=True)),
                ('lowest_price_nearly_over', models.BooleanField(help_text='Lowest price nearly over', null=True)),
                ('lowest_price_flash_sale', models.BooleanField(help_text='Lowest price flash sale', null=True)),
                ('level_one_price', models.TextField(blank=True, help_text='Level one price', null=True)),
                ('level_one_price_type', models.TextField(blank=True, help_text='Level one price type', null=True)),
                ('level_one_price_end_at', models.DateTimeField(blank=True, help_text='Level one price end at', null=True)),
                ('level_one_price_nearly_over', models.BooleanField(help_text='Level one price nearly over', null=True)),
                ('level_one_price_flash_sale', models.BooleanField(help_text='Level one price flash sale', null=True)),
                ('description', models.TextField(blank=True, help_text='Product description', null=True)),
                ('meta_title', models.TextField(blank=True, help_text='Product meta title', null=True)),
                ('meta_description', models.TextField(blank=True, help_text='Product meta description', null=True)),
                ('canonical_url', models.TextField(blank=True, help_text='Product canonical URL', null=True)),
                ('release_date', models.TextField(blank=True, help_text='Product release date', null=True)),
                ('section_id', models.IntegerField(blank=True, help_text='Section ID', null=True)),
                ('is_digital', models.BooleanField(help_text='Is digital', null=True)),
                ('discontinued', models.BooleanField(help_text='Discontinued', null=True)),
                ('category_tree', models.TextField(blank=True, help_text='Category tree', null=True)),
                ('main_category_path', models.TextField(blank=True, help_text='Comma separated main category path', null=True)),
                ('manufacturer', models.IntegerField(blank=True, help_text='Manufacturer', null=True)),
                ('part_numbers', models.TextField(blank=True, help_text='Comma separated list of part numbers', null=True)),
                ('eans', models.TextField(blank=True, help_text='Comma separated list of EANs', null=True)),
                ('thumbnail', models.TextField(blank=True, help_text='Thumbnail URL', null=True)),
                ('average_rating', models.FloatField(blank=True, help_text='Average rating', null=True)),
                ('average_rating_type', models.TextField(blank=True, help_text='Average rating type', null=True)),
                ('energy_marking_rating', models.TextField(blank=True, help_text='Energy marking rating (F to A)', null=True)),
                ('energy_marking_label', models.TextField(blank=True, help_text='Energy rating label link', null=True)),
                ('package_size_id', models.IntegerField(blank=True, help_text='Package size ID', null=True)),
                ('status_codes', models.TextField(blank=True, help_text='Comma separated list of status codes', null=True)),
                ('long_delivery_notice', models.TextField(blank=True, help_text='Long delivery notice', null=True)),
                ('categories', models.TextField(blank=True, help_text='Comma separated list of categories', null=True)),
                ('phone_subscription', models.BooleanField(help_text='Phone subscription', null=True)),
                ('highlighted_review_id', models.IntegerField(blank=True, help_text='Highlighted review ID', null=True)),
                ('highlighted_review_text', models.TextField(blank=True, help_text='Highlighted review text', null=True)),
                ('highlighted_review_rating', models.IntegerField(blank=True, help_text='Highlighted review rating', null=True)),
                ('highlighted_review_upvotes', models.IntegerField(blank=True, help_text='Highlighted review upvotes', null=True)),
                ('highlighted_review_downvotes', models.IntegerField(blank=True, help_text='Highlighted review downvotes', null=True)),
                ('highlighted_review_verified', models.BooleanField(help_text='Highlighted review verified', null=True)),
                ('highlighted_review_created', models.DateTimeField(blank=True, help_text='Highlighted review created', null=True)),
                ('highlighted_review_is_anonymous', models.BooleanField(help_text='Highlighted review is anonymous', null=True)),
                ('highlighted_review_is_employee', models.BooleanField(help_text='Highlighted review is employee', null=True)),
                ('highlighted_review_product_id', models.IntegerField(blank=True, help_text='Highlighted product ID', null=True)),
                ('highlighted_review_user_id', models.TextField(blank=True, help_text='Highlighted review user ID - Anonymous if anonymous', null=True)),
                ('highlighted_review_is_hype', models.BooleanField(help_text='Highlighted review is hype', null=True)),
                ('is_fyndware', models.BooleanField(help_text='Is Fyndware', null=True)),
                ('fyndware_of', models.IntegerField(blank=True, help_text='The product ID of the real product', null=True)),
                ('fyndware_of_description', models.TextField(blank=True, help_text='Fyndware of description', null=True)),
                ('fyndware_class', models.IntegerField(blank=True, help_text='Fyndware class', null=True)),
                ('main_title', models.TextField(blank=True, help_text='Main title', null=True)),
                ('sub_title', models.TextField(blank=True, help_text='Sub title', null=True)),
                ('is_shippable', models.BooleanField(help_text='Is shippable', null=True)),
                ('is_collectable', models.BooleanField(help_text='Is collectable', null=True)),
                ('excluded_shipping_methods', models.TextField(blank=True, help_text='Excluded shipping methods', null=True)),
                ('insurance_id', models.IntegerField(blank=True, help_text='Insurance ID', null=True)),
                ('possible_delivery_methods', models.TextField(blank=True, help_text='Possible delivery methods', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Webhallen product',
                'verbose_name_plural': 'historical Webhallen products',
                'db_table': 'webhallen_product_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalWebhallenJSON',
            fields=[
                ('product_id', models.IntegerField(db_index=True, help_text='Product ID')),
                ('product_json', models.JSONField(help_text='Product JSON')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Webhallen JSON',
                'verbose_name_plural': 'historical Webhallen JSON objects',
                'db_table': 'webhallen_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSitemapSection',
            fields=[
                ('loc', models.URLField(db_index=True, help_text='URL')),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Sitemap section',
                'verbose_name_plural': 'historical Sitemap sections',
                'db_table': 'webhallen_sitemap_section_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSitemapRoot',
            fields=[
                ('loc', models.URLField(db_index=True, help_text='URL')),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Sitemap root',
                'verbose_name_plural': 'historical Sitemap roots',
                'db_table': 'webhallen_sitemap_root_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSitemapProduct',
            fields=[
                ('loc', models.URLField(db_index=True, help_text='URL')),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Sitemap product',
                'verbose_name_plural': 'historical Sitemap products',
                'db_table': 'webhallen_sitemap_product_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSitemapManufacturer',
            fields=[
                ('loc', models.URLField(db_index=True, help_text='URL')),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Sitemap manufacturer',
                'verbose_name_plural': 'historical Sitemap manufacturers',
                'db_table': 'webhallen_sitemap_manufacturer_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSitemapInfoPages',
            fields=[
                ('loc', models.URLField(db_index=True, help_text='URL')),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Sitemap info page',
                'verbose_name_plural': 'historical Sitemap info pages',
                'db_table': 'webhallen_sitemap_info_pages_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSitemapHome',
            fields=[
                ('loc', models.URLField(db_index=True, help_text='URL')),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Sitemap home',
                'verbose_name_plural': 'historical Sitemap homes',
                'db_table': 'webhallen_sitemap_home_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSitemapCategory',
            fields=[
                ('loc', models.URLField(db_index=True, help_text='URL')),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Sitemap category',
                'verbose_name_plural': 'historical Sitemap categories',
                'db_table': 'webhallen_sitemap_category_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSitemapCampaignList',
            fields=[
                ('loc', models.URLField(db_index=True, help_text='URL')),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Sitemap campaign list',
                'verbose_name_plural': 'historical Sitemap campaign lists',
                'db_table': 'webhallen_sitemap_campaign_list_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSitemapCampaign',
            fields=[
                ('loc', models.URLField(db_index=True, help_text='URL')),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Sitemap campaign',
                'verbose_name_plural': 'historical Sitemap campaigns',
                'db_table': 'webhallen_sitemap_campaign_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSitemapArticle',
            fields=[
                ('loc', models.URLField(db_index=True, help_text='URL')),
                ('priority', models.FloatField(help_text='Priority', null=True)),
                ('active', models.BooleanField(help_text='If the URL is still in the sitemap', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Sitemap article',
                'verbose_name_plural': 'historical Sitemap articles',
                'db_table': 'webhallen_sitemap_article_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEans',
            fields=[
                ('ean', models.TextField(db_index=True, help_text='EAN')),
                ('name', models.TextField(blank=True, help_text='Product name', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical European Article Number',
                'verbose_name_plural': 'historical European Article Numbers',
                'db_table': 'eans_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
